//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Codice sorgente generato automaticamente da wsdl, versione=4.8.3928.0.
// 
namespace Com.Unisys.CdR.Certi.WS.Business
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Net;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DOU2Soap11Binding", Namespace="http://dou.land.it")]
    public partial class DOU2 : System.Web.Services.Protocols.SoapHttpClientProtocol {


        protected override System.Net.WebRequest GetWebRequest(Uri uri)
        {
            ServicePointManager.Expect100Continue = true; ;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;          
            ServicePointManager.DefaultConnectionLimit = 9999;
            //   ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;
            System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            System.Net.HttpWebRequest webRequest =
             (System.Net.HttpWebRequest)base.GetWebRequest(uri);
            webRequest.KeepAlive = false;
            webRequest.ProtocolVersion = new Version(1, 0); //this was the big deal...
                                                            //  webRequest.ProtocolVersion = HttpVersion.Version10;
                                                            //   webRequest.PreAuthenticate = true;          
                                                            // webRequest.ConnectionGroupName = Guid.NewGuid().ToString();

            return webRequest;
        }



        private System.Threading.SendOrPostCallback createFromXmlWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback createFromXmlWithParamAndUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateWithPreviousDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteWithDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOperationCompleted;
        
        private System.Threading.SendOrPostCallback firmaDocumentoOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateNoGlyphOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback createGlyphOperationCompleted;
        
        private System.Threading.SendOrPostCallback createAndUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateWithPreviousDocumentWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback createAndUploadWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateLegalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback createWithAttachmentParamUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback createOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback createWithParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback createWithAttachmentParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadNoDocOperationCompleted;
       


        /// <remarks/>
        public DOU2() {
        }
        
        /// <remarks/>
        public event createFromXmlWithParamCompletedEventHandler createFromXmlWithParamCompleted;
        
        /// <remarks/>
        public event uploadCompletedEventHandler uploadCompleted;
        
        /// <remarks/>
        public event createFromXmlWithParamAndUploadCompletedEventHandler createFromXmlWithParamAndUploadCompleted;
        
        /// <remarks/>
        public event updateWithPreviousDocumentCompletedEventHandler updateWithPreviousDocumentCompleted;
        
        /// <remarks/>
        public event checkServicesCompletedEventHandler checkServicesCompleted;
        
        /// <remarks/>
        public event deleteWithDocumentCompletedEventHandler deleteWithDocumentCompleted;
        
        /// <remarks/>
        public event updateCompletedEventHandler updateCompleted;
        
        /// <remarks/>
        public event firmaDocumentoCompletedEventHandler firmaDocumentoCompleted;
        
        /// <remarks/>
        public event updateNoGlyphCompletedEventHandler updateNoGlyphCompleted;
        
        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;
        
        /// <remarks/>
        public event createGlyphCompletedEventHandler createGlyphCompleted;
        
        /// <remarks/>
        public event createAndUploadCompletedEventHandler createAndUploadCompleted;
        
        /// <remarks/>
        public event updateWithPreviousDocumentWithParamCompletedEventHandler updateWithPreviousDocumentWithParamCompleted;
        
        /// <remarks/>
        public event createAndUploadWithParamCompletedEventHandler createAndUploadWithParamCompleted;
        
        /// <remarks/>
        public event updateLegalStatusCompletedEventHandler updateLegalStatusCompleted;
        
        /// <remarks/>
        public event createWithAttachmentParamUploadCompletedEventHandler createWithAttachmentParamUploadCompleted;
        
        /// <remarks/>
        public event createCompletedEventHandler createCompleted;
        
        /// <remarks/>
        public event updateWithParamCompletedEventHandler updateWithParamCompleted;
        
        /// <remarks/>
        public event createWithParamCompletedEventHandler createWithParamCompleted;
        
        /// <remarks/>
        public event createWithAttachmentParamCompletedEventHandler createWithAttachmentParamCompleted;
        
        /// <remarks/>
        public event uploadNoDocCompletedEventHandler uploadNoDocCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createFromXmlWithParam", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createFromXmlWithParam([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string inXml, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createFromXmlWithParam", new object[] {
                        inXml,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateFromXmlWithParam(string inXml, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createFromXmlWithParam", new object[] {
                        inXml,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateFromXmlWithParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createFromXmlWithParamAsync(string inXml, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload) {
            this.createFromXmlWithParamAsync(inXml, idservice, key, param, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createFromXmlWithParamAsync(string inXml, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createFromXmlWithParamOperationCompleted == null)) {
                this.createFromXmlWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateFromXmlWithParamOperationCompleted);
            }
            this.InvokeAsync("createFromXmlWithParam", new object[] {
                        inXml,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createFromXmlWithParamOperationCompleted, userState);
        }
        
        private void OncreateFromXmlWithParamOperationCompleted(object arg) {
            if ((this.createFromXmlWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createFromXmlWithParamCompleted(this, new createFromXmlWithParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:upload", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse upload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] metadata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload) {
            object[] results = this.Invoke("upload", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        metadata,
                        payload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginupload(byte[] inPdf, string idPdf, int idservice, byte[] metadata, string payload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("upload", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        metadata,
                        payload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse Endupload(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void uploadAsync(byte[] inPdf, string idPdf, int idservice, byte[] metadata, string payload) {
            this.uploadAsync(inPdf, idPdf, idservice, metadata, payload, null);
        }
        
        /// <remarks/>
        public void uploadAsync(byte[] inPdf, string idPdf, int idservice, byte[] metadata, string payload, object userState) {
            if ((this.uploadOperationCompleted == null)) {
                this.uploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadOperationCompleted);
            }
            this.InvokeAsync("upload", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        metadata,
                        payload}, this.uploadOperationCompleted, userState);
        }
        
        private void OnuploadOperationCompleted(object arg) {
            if ((this.uploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadCompleted(this, new uploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createFromXmlWithParamAndUpload", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createFromXmlWithParamAndUpload([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string inXml, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] metadata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createFromXmlWithParamAndUpload", new object[] {
                        inXml,
                        idservice,
                        key,
                        param,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateFromXmlWithParamAndUpload(string inXml, int idservice, ArchiveKey key, Param param, byte[] metadata, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createFromXmlWithParamAndUpload", new object[] {
                        inXml,
                        idservice,
                        key,
                        param,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateFromXmlWithParamAndUpload(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createFromXmlWithParamAndUploadAsync(string inXml, int idservice, ArchiveKey key, Param param, byte[] metadata, string internalPayload, string payload, string offlinePayload) {
            this.createFromXmlWithParamAndUploadAsync(inXml, idservice, key, param, metadata, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createFromXmlWithParamAndUploadAsync(string inXml, int idservice, ArchiveKey key, Param param, byte[] metadata, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createFromXmlWithParamAndUploadOperationCompleted == null)) {
                this.createFromXmlWithParamAndUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateFromXmlWithParamAndUploadOperationCompleted);
            }
            this.InvokeAsync("createFromXmlWithParamAndUpload", new object[] {
                        inXml,
                        idservice,
                        key,
                        param,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createFromXmlWithParamAndUploadOperationCompleted, userState);
        }
        
        private void OncreateFromXmlWithParamAndUploadOperationCompleted(object arg) {
            if ((this.createFromXmlWithParamAndUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createFromXmlWithParamAndUploadCompleted(this, new createFromXmlWithParamAndUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:updateWithPreviousDocument", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse updateWithPreviousDocument([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] oldPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("updateWithPreviousDocument", new object[] {
                        inPdf,
                        oldPdf,
                        idservice,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateWithPreviousDocument(byte[] inPdf, byte[] oldPdf, int idservice, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("updateWithPreviousDocument", new object[] {
                        inPdf,
                        oldPdf,
                        idservice,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndupdateWithPreviousDocument(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void updateWithPreviousDocumentAsync(byte[] inPdf, byte[] oldPdf, int idservice, string internalPayload, string payload, string offlinePayload) {
            this.updateWithPreviousDocumentAsync(inPdf, oldPdf, idservice, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void updateWithPreviousDocumentAsync(byte[] inPdf, byte[] oldPdf, int idservice, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.updateWithPreviousDocumentOperationCompleted == null)) {
                this.updateWithPreviousDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateWithPreviousDocumentOperationCompleted);
            }
            this.InvokeAsync("updateWithPreviousDocument", new object[] {
                        inPdf,
                        oldPdf,
                        idservice,
                        internalPayload,
                        payload,
                        offlinePayload}, this.updateWithPreviousDocumentOperationCompleted, userState);
        }
        
        private void OnupdateWithPreviousDocumentOperationCompleted(object arg) {
            if ((this.updateWithPreviousDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateWithPreviousDocumentCompleted(this, new updateWithPreviousDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:checkServices", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("return", IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("checkServiceBean", Namespace="http://dou.land.it/xsd")]
        public CheckServiceBean[] checkServices() {
            object[] results = this.Invoke("checkServices", new object[0]);
            return ((CheckServiceBean[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincheckServices(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("checkServices", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public CheckServiceBean[] EndcheckServices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CheckServiceBean[])(results[0]));
        }
        
        /// <remarks/>
        public void checkServicesAsync() {
            this.checkServicesAsync(null);
        }
        
        /// <remarks/>
        public void checkServicesAsync(object userState) {
            if ((this.checkServicesOperationCompleted == null)) {
                this.checkServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckServicesOperationCompleted);
            }
            this.InvokeAsync("checkServices", new object[0], this.checkServicesOperationCompleted, userState);
        }
        
        private void OncheckServicesOperationCompleted(object arg) {
            if ((this.checkServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkServicesCompleted(this, new checkServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:deleteWithDocument", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse deleteWithDocument([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, int idservice) {
            object[] results = this.Invoke("deleteWithDocument", new object[] {
                        inPdf,
                        idservice});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegindeleteWithDocument(byte[] inPdf, int idservice, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("deleteWithDocument", new object[] {
                        inPdf,
                        idservice}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EnddeleteWithDocument(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void deleteWithDocumentAsync(byte[] inPdf, int idservice) {
            this.deleteWithDocumentAsync(inPdf, idservice, null);
        }
        
        /// <remarks/>
        public void deleteWithDocumentAsync(byte[] inPdf, int idservice, object userState) {
            if ((this.deleteWithDocumentOperationCompleted == null)) {
                this.deleteWithDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteWithDocumentOperationCompleted);
            }
            this.InvokeAsync("deleteWithDocument", new object[] {
                        inPdf,
                        idservice}, this.deleteWithDocumentOperationCompleted, userState);
        }
        
        private void OndeleteWithDocumentOperationCompleted(object arg) {
            if ((this.deleteWithDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteWithDocumentCompleted(this, new deleteWithDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:update", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse update([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("update", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginupdate(byte[] inPdf, string idPdf, int idservice, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("update", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse Endupdate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void updateAsync(byte[] inPdf, string idPdf, int idservice, string internalPayload, string payload, string offlinePayload) {
            this.updateAsync(inPdf, idPdf, idservice, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void updateAsync(byte[] inPdf, string idPdf, int idservice, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.updateOperationCompleted == null)) {
                this.updateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOperationCompleted);
            }
            this.InvokeAsync("update", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        internalPayload,
                        payload,
                        offlinePayload}, this.updateOperationCompleted, userState);
        }
        
        private void OnupdateOperationCompleted(object arg) {
            if ((this.updateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateCompleted(this, new updateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:firmaDocumento", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse firmaDocumento([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] buffer, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string signType) {
            object[] results = this.Invoke("firmaDocumento", new object[] {
                        buffer,
                        signType});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginfirmaDocumento(byte[] buffer, string signType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("firmaDocumento", new object[] {
                        buffer,
                        signType}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndfirmaDocumento(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void firmaDocumentoAsync(byte[] buffer, string signType) {
            this.firmaDocumentoAsync(buffer, signType, null);
        }
        
        /// <remarks/>
        public void firmaDocumentoAsync(byte[] buffer, string signType, object userState) {
            if ((this.firmaDocumentoOperationCompleted == null)) {
                this.firmaDocumentoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfirmaDocumentoOperationCompleted);
            }
            this.InvokeAsync("firmaDocumento", new object[] {
                        buffer,
                        signType}, this.firmaDocumentoOperationCompleted, userState);
        }
        
        private void OnfirmaDocumentoOperationCompleted(object arg) {
            if ((this.firmaDocumentoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.firmaDocumentoCompleted(this, new firmaDocumentoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:updateNoGlyph", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse updateNoGlyph([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, int idservice) {
            object[] results = this.Invoke("updateNoGlyph", new object[] {
                        inPdf,
                        idservice});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateNoGlyph(byte[] inPdf, int idservice, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("updateNoGlyph", new object[] {
                        inPdf,
                        idservice}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndupdateNoGlyph(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void updateNoGlyphAsync(byte[] inPdf, int idservice) {
            this.updateNoGlyphAsync(inPdf, idservice, null);
        }
        
        /// <remarks/>
        public void updateNoGlyphAsync(byte[] inPdf, int idservice, object userState) {
            if ((this.updateNoGlyphOperationCompleted == null)) {
                this.updateNoGlyphOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateNoGlyphOperationCompleted);
            }
            this.InvokeAsync("updateNoGlyph", new object[] {
                        inPdf,
                        idservice}, this.updateNoGlyphOperationCompleted, userState);
        }
        
        private void OnupdateNoGlyphOperationCompleted(object arg) {
            if ((this.updateNoGlyphCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateNoGlyphCompleted(this, new updateNoGlyphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:delete", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse delete([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idPdf, int idservice) {
            object[] results = this.Invoke("delete", new object[] {
                        idPdf,
                        idservice});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Begindelete(string idPdf, int idservice, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("delete", new object[] {
                        idPdf,
                        idservice}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse Enddelete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void deleteAsync(string idPdf, int idservice) {
            this.deleteAsync(idPdf, idservice, null);
        }
        
        /// <remarks/>
        public void deleteAsync(string idPdf, int idservice, object userState) {
            if ((this.deleteOperationCompleted == null)) {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                        idPdf,
                        idservice}, this.deleteOperationCompleted, userState);
        }
        
        private void OndeleteOperationCompleted(object arg) {
            if ((this.deleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new deleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createGlyph", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createGlyph(int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string checksum, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createGlyph", new object[] {
                        idservice,
                        key,
                        checksum,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateGlyph(int idservice, ArchiveKey key, string checksum, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createGlyph", new object[] {
                        idservice,
                        key,
                        checksum,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateGlyph(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createGlyphAsync(int idservice, ArchiveKey key, string checksum, string internalPayload, string payload, string offlinePayload) {
            this.createGlyphAsync(idservice, key, checksum, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createGlyphAsync(int idservice, ArchiveKey key, string checksum, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createGlyphOperationCompleted == null)) {
                this.createGlyphOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateGlyphOperationCompleted);
            }
            this.InvokeAsync("createGlyph", new object[] {
                        idservice,
                        key,
                        checksum,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createGlyphOperationCompleted, userState);
        }
        
        private void OncreateGlyphOperationCompleted(object arg) {
            if ((this.createGlyphCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createGlyphCompleted(this, new createGlyphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createAndUpload", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createAndUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] metadata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createAndUpload", new object[] {
                        inPdf,
                        idservice,
                        key,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateAndUpload(byte[] inPdf, int idservice, ArchiveKey key, byte[] metadata, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createAndUpload", new object[] {
                        inPdf,
                        idservice,
                        key,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateAndUpload(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createAndUploadAsync(byte[] inPdf, int idservice, ArchiveKey key, byte[] metadata, string internalPayload, string payload, string offlinePayload) {
            this.createAndUploadAsync(inPdf, idservice, key, metadata, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createAndUploadAsync(byte[] inPdf, int idservice, ArchiveKey key, byte[] metadata, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createAndUploadOperationCompleted == null)) {
                this.createAndUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateAndUploadOperationCompleted);
            }
            this.InvokeAsync("createAndUpload", new object[] {
                        inPdf,
                        idservice,
                        key,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createAndUploadOperationCompleted, userState);
        }
        
        private void OncreateAndUploadOperationCompleted(object arg) {
            if ((this.createAndUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createAndUploadCompleted(this, new createAndUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:updateWithPreviousDocumentWithParam", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse updateWithPreviousDocumentWithParam([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] oldPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("updateWithPreviousDocumentWithParam", new object[] {
                        inPdf,
                        oldPdf,
                        idservice,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateWithPreviousDocumentWithParam(byte[] inPdf, byte[] oldPdf, int idservice, Param param, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("updateWithPreviousDocumentWithParam", new object[] {
                        inPdf,
                        oldPdf,
                        idservice,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndupdateWithPreviousDocumentWithParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void updateWithPreviousDocumentWithParamAsync(byte[] inPdf, byte[] oldPdf, int idservice, Param param, string internalPayload, string payload, string offlinePayload) {
            this.updateWithPreviousDocumentWithParamAsync(inPdf, oldPdf, idservice, param, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void updateWithPreviousDocumentWithParamAsync(byte[] inPdf, byte[] oldPdf, int idservice, Param param, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.updateWithPreviousDocumentWithParamOperationCompleted == null)) {
                this.updateWithPreviousDocumentWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateWithPreviousDocumentWithParamOperationCompleted);
            }
            this.InvokeAsync("updateWithPreviousDocumentWithParam", new object[] {
                        inPdf,
                        oldPdf,
                        idservice,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, this.updateWithPreviousDocumentWithParamOperationCompleted, userState);
        }
        
        private void OnupdateWithPreviousDocumentWithParamOperationCompleted(object arg) {
            if ((this.updateWithPreviousDocumentWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateWithPreviousDocumentWithParamCompleted(this, new updateWithPreviousDocumentWithParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createAndUploadWithParam", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createAndUploadWithParam([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] metadata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createAndUploadWithParam", new object[] {
                        inPdf,
                        idservice,
                        key,
                        param,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateAndUploadWithParam(byte[] inPdf, int idservice, ArchiveKey key, Param param, byte[] metadata, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createAndUploadWithParam", new object[] {
                        inPdf,
                        idservice,
                        key,
                        param,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateAndUploadWithParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createAndUploadWithParamAsync(byte[] inPdf, int idservice, ArchiveKey key, Param param, byte[] metadata, string internalPayload, string payload, string offlinePayload) {
            this.createAndUploadWithParamAsync(inPdf, idservice, key, param, metadata, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createAndUploadWithParamAsync(byte[] inPdf, int idservice, ArchiveKey key, Param param, byte[] metadata, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createAndUploadWithParamOperationCompleted == null)) {
                this.createAndUploadWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateAndUploadWithParamOperationCompleted);
            }
            this.InvokeAsync("createAndUploadWithParam", new object[] {
                        inPdf,
                        idservice,
                        key,
                        param,
                        metadata,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createAndUploadWithParamOperationCompleted, userState);
        }
        
        private void OncreateAndUploadWithParamOperationCompleted(object arg) {
            if ((this.createAndUploadWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createAndUploadWithParamCompleted(this, new createAndUploadWithParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:updateLegalStatus", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse updateLegalStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idPdf, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string legalStatus) {
            object[] results = this.Invoke("updateLegalStatus", new object[] {
                        idPdf,
                        legalStatus});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateLegalStatus(string idPdf, string legalStatus, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("updateLegalStatus", new object[] {
                        idPdf,
                        legalStatus}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndupdateLegalStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void updateLegalStatusAsync(string idPdf, string legalStatus) {
            this.updateLegalStatusAsync(idPdf, legalStatus, null);
        }
        
        /// <remarks/>
        public void updateLegalStatusAsync(string idPdf, string legalStatus, object userState) {
            if ((this.updateLegalStatusOperationCompleted == null)) {
                this.updateLegalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateLegalStatusOperationCompleted);
            }
            this.InvokeAsync("updateLegalStatus", new object[] {
                        idPdf,
                        legalStatus}, this.updateLegalStatusOperationCompleted, userState);
        }
        
        private void OnupdateLegalStatusOperationCompleted(object arg) {
            if ((this.updateLegalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateLegalStatusCompleted(this, new updateLegalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createWithAttachmentParamUpload", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createWithAttachmentParamUpload([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] mainPdf, [System.Xml.Serialization.XmlElementAttribute("attachments", IsNullable=true)] DOUAttachment[] attachments, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] metadata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createWithAttachmentParamUpload", new object[] {
                        mainPdf,
                        attachments,
                        idservice,
                        key,
                        param,
                        metadata,
                        payload,
                        internalPayload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateWithAttachmentParamUpload(byte[] mainPdf, DOUAttachment[] attachments, int idservice, ArchiveKey key, Param param, byte[] metadata, string payload, string internalPayload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createWithAttachmentParamUpload", new object[] {
                        mainPdf,
                        attachments,
                        idservice,
                        key,
                        param,
                        metadata,
                        payload,
                        internalPayload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateWithAttachmentParamUpload(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createWithAttachmentParamUploadAsync(byte[] mainPdf, DOUAttachment[] attachments, int idservice, ArchiveKey key, Param param, byte[] metadata, string payload, string internalPayload, string offlinePayload) {
            this.createWithAttachmentParamUploadAsync(mainPdf, attachments, idservice, key, param, metadata, payload, internalPayload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createWithAttachmentParamUploadAsync(byte[] mainPdf, DOUAttachment[] attachments, int idservice, ArchiveKey key, Param param, byte[] metadata, string payload, string internalPayload, string offlinePayload, object userState) {
            if ((this.createWithAttachmentParamUploadOperationCompleted == null)) {
                this.createWithAttachmentParamUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateWithAttachmentParamUploadOperationCompleted);
            }
            this.InvokeAsync("createWithAttachmentParamUpload", new object[] {
                        mainPdf,
                        attachments,
                        idservice,
                        key,
                        param,
                        metadata,
                        payload,
                        internalPayload,
                        offlinePayload}, this.createWithAttachmentParamUploadOperationCompleted, userState);
        }
        
        private void OncreateWithAttachmentParamUploadOperationCompleted(object arg) {
            if ((this.createWithAttachmentParamUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createWithAttachmentParamUploadCompleted(this, new createWithAttachmentParamUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:create", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse create([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("create", new object[] {
                        inPdf,
                        idservice,
                        key,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Begincreate(byte[] inPdf, int idservice, ArchiveKey key, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("create", new object[] {
                        inPdf,
                        idservice,
                        key,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse Endcreate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createAsync(byte[] inPdf, int idservice, ArchiveKey key, string internalPayload, string payload, string offlinePayload) {
            this.createAsync(inPdf, idservice, key, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createAsync(byte[] inPdf, int idservice, ArchiveKey key, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createOperationCompleted == null)) {
                this.createOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateOperationCompleted);
            }
            this.InvokeAsync("create", new object[] {
                        inPdf,
                        idservice,
                        key,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createOperationCompleted, userState);
        }
        
        private void OncreateOperationCompleted(object arg) {
            if ((this.createCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createCompleted(this, new createCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:updateWithParam", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse updateWithParam([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("updateWithParam", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginupdateWithParam(byte[] inPdf, string idPdf, int idservice, Param param, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("updateWithParam", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndupdateWithParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void updateWithParamAsync(byte[] inPdf, string idPdf, int idservice, Param param, string internalPayload, string payload, string offlinePayload) {
            this.updateWithParamAsync(inPdf, idPdf, idservice, param, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void updateWithParamAsync(byte[] inPdf, string idPdf, int idservice, Param param, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.updateWithParamOperationCompleted == null)) {
                this.updateWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateWithParamOperationCompleted);
            }
            this.InvokeAsync("updateWithParam", new object[] {
                        inPdf,
                        idPdf,
                        idservice,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, this.updateWithParamOperationCompleted, userState);
        }
        
        private void OnupdateWithParamOperationCompleted(object arg) {
            if ((this.updateWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateWithParamCompleted(this, new updateWithParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createWithParam", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createWithParam([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createWithParam", new object[] {
                        inPdf,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateWithParam(byte[] inPdf, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createWithParam", new object[] {
                        inPdf,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateWithParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createWithParamAsync(byte[] inPdf, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload) {
            this.createWithParamAsync(inPdf, idservice, key, param, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createWithParamAsync(byte[] inPdf, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createWithParamOperationCompleted == null)) {
                this.createWithParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateWithParamOperationCompleted);
            }
            this.InvokeAsync("createWithParam", new object[] {
                        inPdf,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createWithParamOperationCompleted, userState);
        }
        
        private void OncreateWithParamOperationCompleted(object arg) {
            if ((this.createWithParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createWithParamCompleted(this, new createWithParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:createWithAttachmentParam", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse createWithAttachmentParam([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] mainPdf, [System.Xml.Serialization.XmlElementAttribute("attachments", IsNullable=true)] DOUAttachment[] attachments, int idservice, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ArchiveKey key, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Param param, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string internalPayload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offlinePayload) {
            object[] results = this.Invoke("createWithAttachmentParam", new object[] {
                        mainPdf,
                        attachments,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincreateWithAttachmentParam(byte[] mainPdf, DOUAttachment[] attachments, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("createWithAttachmentParam", new object[] {
                        mainPdf,
                        attachments,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EndcreateWithAttachmentParam(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void createWithAttachmentParamAsync(byte[] mainPdf, DOUAttachment[] attachments, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload) {
            this.createWithAttachmentParamAsync(mainPdf, attachments, idservice, key, param, internalPayload, payload, offlinePayload, null);
        }
        
        /// <remarks/>
        public void createWithAttachmentParamAsync(byte[] mainPdf, DOUAttachment[] attachments, int idservice, ArchiveKey key, Param param, string internalPayload, string payload, string offlinePayload, object userState) {
            if ((this.createWithAttachmentParamOperationCompleted == null)) {
                this.createWithAttachmentParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateWithAttachmentParamOperationCompleted);
            }
            this.InvokeAsync("createWithAttachmentParam", new object[] {
                        mainPdf,
                        attachments,
                        idservice,
                        key,
                        param,
                        internalPayload,
                        payload,
                        offlinePayload}, this.createWithAttachmentParamOperationCompleted, userState);
        }
        
        private void OncreateWithAttachmentParamOperationCompleted(object arg) {
            if ((this.createWithAttachmentParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createWithAttachmentParamCompleted(this, new createWithAttachmentParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:uploadNoDoc", RequestNamespace="http://dou.land.it", ResponseNamespace="http://dou.land.it", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public DOUResponse uploadNoDoc([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] inPdf, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string idPdf, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string checksum, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sha256, int idservice, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] metadata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payload) {
            object[] results = this.Invoke("uploadNoDoc", new object[] {
                        inPdf,
                        idPdf,
                        checksum,
                        sha256,
                        idservice,
                        metadata,
                        payload});
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginuploadNoDoc(byte[] inPdf, string idPdf, string checksum, string sha256, int idservice, byte[] metadata, string payload, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("uploadNoDoc", new object[] {
                        inPdf,
                        idPdf,
                        checksum,
                        sha256,
                        idservice,
                        metadata,
                        payload}, callback, asyncState);
        }
        
        /// <remarks/>
        public DOUResponse EnduploadNoDoc(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DOUResponse)(results[0]));
        }
        
        /// <remarks/>
        public void uploadNoDocAsync(byte[] inPdf, string idPdf, string checksum, string sha256, int idservice, byte[] metadata, string payload) {
            this.uploadNoDocAsync(inPdf, idPdf, checksum, sha256, idservice, metadata, payload, null);
        }
        
        /// <remarks/>
        public void uploadNoDocAsync(byte[] inPdf, string idPdf, string checksum, string sha256, int idservice, byte[] metadata, string payload, object userState) {
            if ((this.uploadNoDocOperationCompleted == null)) {
                this.uploadNoDocOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadNoDocOperationCompleted);
            }
            this.InvokeAsync("uploadNoDoc", new object[] {
                        inPdf,
                        idPdf,
                        checksum,
                        sha256,
                        idservice,
                        metadata,
                        payload}, this.uploadNoDocOperationCompleted, userState);
        }
        
        private void OnuploadNoDocOperationCompleted(object arg) {
            if ((this.uploadNoDocCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadNoDocCompleted(this, new uploadNoDocCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://keys.dou.land.it/xsd")]
    public partial class ArchiveKey {
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dou.land.it/xsd")]
    public partial class DOUAttachment {
        
        private byte[] contentField;
        
        private string fileNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dou.land.it/xsd")]
    public partial class CheckServiceBean {
        
        private string esitoField;
        
        private string nomeServizioField;
        
        private string reasonField;
        
        private string tipoServizioField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string esito {
            get {
                return this.esitoField;
            }
            set {
                this.esitoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string nomeServizio {
            get {
                return this.nomeServizioField;
            }
            set {
                this.nomeServizioField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string tipoServizio {
            get {
                return this.tipoServizioField;
            }
            set {
                this.tipoServizioField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://dou.land.it/xsd")]
    public partial class DOUResponse {
        
        private string idPdfField;
        
        private byte[] pdfField;
        
        private string reasonField;
        
        private int statusField;
        
        private bool statusFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string idPdf {
            get {
                return this.idPdfField;
            }
            set {
                this.idPdfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] pdf {
            get {
                return this.pdfField;
            }
            set {
                this.pdfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        public int status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://pagerange.param.dou.land.it/xsd")]
    public partial class PageRange {
        
        private string rangeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string range {
            get {
                return this.rangeField;
            }
            set {
                this.rangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://coords.param.dou.land.it/xsd")]
    public partial class Coords {
        
        private int xField;
        
        private bool xFieldSpecified;
        
        private int yField;
        
        private bool yFieldSpecified;
        
        /// <remarks/>
        public int x {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool xSpecified {
            get {
                return this.xFieldSpecified;
            }
            set {
                this.xFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ySpecified {
            get {
                return this.yFieldSpecified;
            }
            set {
                this.yFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://param.dou.land.it/xsd")]
    public partial class Param {
        
        private Coords coordsField;
        
        private PageRange pagerangeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Coords coords {
            get {
                return this.coordsField;
            }
            set {
                this.coordsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public PageRange pagerange {
            get {
                return this.pagerangeField;
            }
            set {
                this.pagerangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createFromXmlWithParamCompletedEventHandler(object sender, createFromXmlWithParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createFromXmlWithParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createFromXmlWithParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void uploadCompletedEventHandler(object sender, uploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createFromXmlWithParamAndUploadCompletedEventHandler(object sender, createFromXmlWithParamAndUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createFromXmlWithParamAndUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createFromXmlWithParamAndUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void updateWithPreviousDocumentCompletedEventHandler(object sender, updateWithPreviousDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateWithPreviousDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateWithPreviousDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void checkServicesCompletedEventHandler(object sender, checkServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckServiceBean[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckServiceBean[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void deleteWithDocumentCompletedEventHandler(object sender, deleteWithDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteWithDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteWithDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void updateCompletedEventHandler(object sender, updateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void firmaDocumentoCompletedEventHandler(object sender, firmaDocumentoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class firmaDocumentoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal firmaDocumentoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void updateNoGlyphCompletedEventHandler(object sender, updateNoGlyphCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateNoGlyphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateNoGlyphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void deleteCompletedEventHandler(object sender, deleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createGlyphCompletedEventHandler(object sender, createGlyphCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createGlyphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createGlyphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createAndUploadCompletedEventHandler(object sender, createAndUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createAndUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createAndUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void updateWithPreviousDocumentWithParamCompletedEventHandler(object sender, updateWithPreviousDocumentWithParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateWithPreviousDocumentWithParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateWithPreviousDocumentWithParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createAndUploadWithParamCompletedEventHandler(object sender, createAndUploadWithParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createAndUploadWithParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createAndUploadWithParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void updateLegalStatusCompletedEventHandler(object sender, updateLegalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateLegalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateLegalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createWithAttachmentParamUploadCompletedEventHandler(object sender, createWithAttachmentParamUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createWithAttachmentParamUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createWithAttachmentParamUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createCompletedEventHandler(object sender, createCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void updateWithParamCompletedEventHandler(object sender, updateWithParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateWithParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateWithParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createWithParamCompletedEventHandler(object sender, createWithParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createWithParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createWithParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void createWithAttachmentParamCompletedEventHandler(object sender, createWithAttachmentParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createWithAttachmentParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createWithAttachmentParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void uploadNoDocCompletedEventHandler(object sender, uploadNoDocCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadNoDocCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadNoDocCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DOUResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DOUResponse)(this.results[0]));
            }
        }
    }
}
